#!/usr/bin/python3
"""
Edit directories via your text editor.

Requires sh.py that can be installed via `pip3 install --user sh`.
"""

import argparse
import multiprocessing.dummy as mp
import os
import sh
import tempfile

__author__ = 'Danijar Hafner'


def user_edit_text(text):
  editor = sh.Command(os.environ.get('EDITOR', 'vim'))

  with tempfile.NamedTemporaryFile('w+', suffix='.tmp') as file_:
    file_.write(text)
    file_.flush()
    editor(file_.name, _fg=True)
    file_.seek(0)
    return file_.read()


def read_changes(dirs, edited):
  edited = [line.strip() for line in edited.strip().split('\n')]
  edited = [line.split(' ', 1) for line in edited if line]
  edited = {int(index): entry for index, entry in edited}
  keeps, renames, removes = [], [], []
  for index, entry in enumerate(dirs):
    if index not in edited:
      removes.append(entry)
    elif edited[index] != entry:
      renames.append((entry, edited[index]))
    else:
      keeps.append(entry)
  renames = list(sorted(renames))
  removes = list(sorted(removes))
  return keeps, renames, removes


def preview_changes(keeps, renames, removes):
  if keeps:
    print('Unchanged:')
    print(''.join('- {}\n'.format(x) for x in keeps))
  if renames:
    print('Rename:')
    print(''.join('- {}\n  {}\n'.format(*x) for x in renames))
  if removes:
    print('Remove:')
    print(''.join('- {}\n'.format(x) for x in removes))
  try:
    if input('Looks good? [Ny]: ') == 'y':
      return True
  except KeyboardInterrupt:
    print('')
  print('No changes made.')
  return False


def execute_changes(renames, removes, args):
  def remove(before):
    try:
      run_cmd(args.remove, before)
    except sh.ErrorReturnCode as e:
      print(e)
      return 1
    return 0
  def rename(before_after):
    before, after = before_after
    try:
      run_cmd(args.mkdirs, os.path.dirname(after))
      run_cmd(args.rename, before, after)
    except sh.ErrorReturnCode as e:
      print(e)
      return 1
    return 0
  failures = 0
  pool = mp.Pool(20)
  # Execute removes first so that renamed files are not removed.
  failures += sum(pool.map(remove, removes))
  failures += sum(pool.map(rename, renames))
  return failures


def read_directory_list(cmd):
  dirs = run_cmd(args.list, args.root).split('\n')
  text = ''.join('{} {}\n'.format(*x) for x in enumerate(dirs))
  return dirs, text


def run_cmd(command, *inputs):
  command = command.format(*inputs)
  program, flags = command.split(' ', 1)
  output = sh.Command(program)(*flags.split())
  return output.strip()


def main(args):
  dirs, initial = read_directory_list(args.list)
  current = initial
  while True:
    edited = user_edit_text(current)
    if initial.strip() == edited.strip():
      print('No changes made.')
      return
    keeps, renames, removes = read_changes(dirs, edited)
    if not preview_changes(keeps, renames, removes):
      return
    failures = execute_changes(renames, removes, args)
    message = '{} changes failed. Re-edit change list? [Ny]: '
    if failures and input(message.format(failures)) == 'y':
      dirs, initial = read_directory_list(args.list)
      current = edited
      continue
    else:
      break
  print('Done.')


if __name__ == '__main__':
  description = 'Edit directories via your text editor.'
  parser = argparse.ArgumentParser(description=description)
  parser.add_argument('root', nargs='?', default='.')
  parser.add_argument('--list', default='find {} -maxdepth 5')
  parser.add_argument('--mkdirs', default='mkdir -p {}')
  parser.add_argument('--rename', default='mv {} {}')
  parser.add_argument('--remove', default='rm -rf {}')
  args = parser.parse_args()
  main(args)
