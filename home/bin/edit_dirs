#!python3
import argparse
import multiprocessing.dummy as mp
import os
import pathlib
import sh  # pip install sh
import tempfile


def user_edit_text(text):
  editor = sh.Command('vim')
  path = pathlib.Path('/tmp/edit_dirs')
  with path.open('w') as f:
    f.write(text)
  editor(str(path), _fg=True)
  with path.open('r') as f:
    return f.read()
  with tempfile.NamedTemporaryFile('w+', suffix='.tmp') as file_:
    print(file_.name)
    file_.write(text)
    file_.flush()
    editor(file_.name, _fg=True)
    file_.seek(0)
    return file_.read()


def read_changes(dirs, edited):
  edited = [line.strip() for line in edited.strip().split('\n')]
  edited = [line.split(' ', 1) for line in edited if line]
  edited = {int(index): entry for index, entry in edited}
  keeps, renames, removes = [], [], []
  for index, entry in enumerate(dirs):
    if index not in edited:
      removes.append(entry)
    elif edited[index] != entry:
      renames.append((entry, edited[index]))
    else:
      keeps.append(entry)
  return keeps, renames, removes


def preview_changes(keeps, renames, removes):
  if keeps:
    print('Unchanged:')
    print(''.join('- {}\n'.format(x) for x in keeps))
  if renames:
    print('Rename:')
    print(''.join('- {}\n  {}\n'.format(*x) for x in renames))
  if removes:
    print('Remove:')
    print(''.join('- {}\n'.format(x) for x in removes))
  try:
    if input('Looks good? [Ny]: ') == 'y':
      return True
  except KeyboardInterrupt:
    print('')
  print('No changes made.')
  return False


def execute_changes(renames, removes, args):
  def rename(before_after):
    before, after = before_after
    try:
      for cmd in args.rename:
        params = cmd.split(' ', 1)[1].format(before, after)
        sh.Command(cmd.split(' ', 1)[0])(*params.split())
    except sh.ErrorReturnCode as e:
      print(e)
      return 1
    return 0
  def remove(before):
    try:
      for cmd in args.remove:
        params = cmd.split(' ', 1)[1].format(before)
        sh.Command(cmd.split(' ', 1)[0])(*params.split())
    except sh.ErrorReturnCode as e:
      print(e)
      return 1
    return 0
  failures = 0
  pool = mp.Pool(20)
  failures += sum(pool.map(remove, removes))
  failures += sum(pool.map(rename, renames))
  return failures


def read_directory_list(content_cmd):
  content = sh.Command(content_cmd.split(' ', 1)[0])
  params = content_cmd.split(' ', 1)[1]
  maybe_root = [args.root] if args.root else []
  dirs = content(*params.format(*maybe_root).split()).strip().split('\n')
  text = ''.join('{} {}\n'.format(*x) for x in enumerate(dirs))
  return dirs, text


def main(args):
  dirs, initial = read_directory_list(args.content)
  current = initial
  while True:
    edited = user_edit_text(current)
    if initial.strip() == edited.strip():
      print('No changes made.')
      return
    keeps, renames, removes = read_changes(dirs, edited)
    if not preview_changes(keeps, renames, removes):
      return
    failures = execute_changes(renames, removes, args)
    message = '{} changes failed. Re-edit change list? [Ny]: '
    if failures and input(message.format(failures)) == 'y':
      dirs, initial = read_directory_list(args.content)
      current = edited
      continue
    else:
      break
  print('Done.')


if __name__ == '__main__':
  description = 'Edit directory structures via your text editor.'
  parser = argparse.ArgumentParser(description=description)
  parser.add_argument(
      'root', nargs='?', type=str)
  parser.add_argument(
      '--content', type=str, default='ls -1 {}')
  parser.add_argument(
      '--rename', nargs='+', type=str,
      default=['mv {} {}'])
  parser.add_argument(
      '--remove', nargs='+', type=str,
      default=['rm -rf {}'])
  args = parser.parse_args()
  main(args)
