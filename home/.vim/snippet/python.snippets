# vim: set textwidth=0 wrapmargin=0 :
# See :help UltiSnips, especially section Snippet Options.

###############################################################################
# Generic text editing
###############################################################################

snippet "(\w+)\)" "parenthesis" r
(`!p snip.rv = match.group(1)`$1)$0
endsnippet

snippet ## "comment headline" b
###############################################################################
# ${1:Title}
###############################################################################

endsnippet

###############################################################################
# Import statements
###############################################################################

# This snippet has an intentional trailing space.
snippet i "import" b
import 
endsnippet

snippet "import n" "import numpy" br
import numpy as np
endsnippet

snippet "import p" "import pyplot" br
import matplotlib.pyplot as plt
endsnippet

snippet "import t" "import tensorflow" br
import tensorflow as tf
endsnippet

snippet "import tfp" "import tfp" br
import tensorflow_probability as tfp
endsnippet

snippet "import tfd" "import tfp distributions" br
from tensorflow_probability import distributions as tfd
endsnippet

###############################################################################
# Python syntax
###############################################################################

snippet "^    d" "method unindent" r

  def ${1:method}(self, ${2}):
    ${3:pass}
endsnippet

snippet "^  d" "method" r

  def ${1:method}(self, ${2}):
    ${3:pass}
endsnippet

snippet "^d" "function" r

def ${1:function}(${2}):
  ${3:pass}

endsnippet

snippet class "class" b
class ${1:Class}:

  def __init__(self, $2):
		${3:pass}

endsnippet

snippet s "private member" b
self._${1:member}
endsnippet

snippet for "for loop" b
for ${1:index} in ${1:range()}:
	${3:pass}
endsnippet

###############################################################################
# Lines
###############################################################################

snippet p "print" b
print(${1:${VISUAL}})
endsnippet

snippet -- "print line" b
print('-' * 79)
endsnippet

snippet parser "argparse add parser" b
parser.add_argument('--${1:name}', type=${2:str}, default=${3:None})
endsnippet

snippet parser "argparse add parser" b
parser.add_argument('--${1:name}', type=${2:str}, default=${3:None})
endsnippet

snippet rand "random state" b
random = np.random.RandomState(${1:seed=0})
endsnippet

###############################################################################
# Code blocks
###############################################################################

snippet pp "debug print" b
print('-' * 79)
import pprint
pprint.pprint(${1:${VISUAL}})
print('-' * 79)
endsnippet

snippet main "main" b
import argparse


def main(args):
  ${0:${VISUAL}}


if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  main(parser.parse_args())
endsnippet

snippet fig "pyplot figure" b
fig, ax = plt.subplots()
ax.plot(${1:${VISUAL}})
ax.legend()
fig.tight_layout()
endsnippet

snippet figs "pyplot figures" b
fig, axes = plt.subplots(ncols=${1:2}, nrows=${2:1}, figsize=($2, $1))
axes = axes.flatten()
$3
fig.tight_layout()
endsnippet

snippet fig "pyplot figure with handout" "re.search(r'(\w+) = handout\.Handout', ''.join(snip.buffer))" be
fig, ax = plt.subplots()
ax.plot(${1:${VISUAL}})
ax.legend()
fig.tight_layout()
`!p snip.rv = snip.context.group(1)`.add_figure(fig, show=True)
endsnippet

snippet doc "handout" b
import pathlib
import handout


doc = handout.Handout(pathlib.Path(__file__).stem)

$1

doc.show()
endsnippet

snippet norm "tensorflow parameterized normal" b
mean, rawstd = tf.split(${VISUAL:hidden}, 2, -1)
std = tf.math.softplus(rawstd + 0.55) + 1e-3
${2:dist =} tfd.Independent(tfd.Normal(mean, std), ${1:1})
endsnippet
